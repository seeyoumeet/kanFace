<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.seeyoumeet.dao.StudentLeaveDao">

    <!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.seeyoumeet.entity.StudentLeaveEntity" id="StudentLeaveMap">
        <result property="id" column="id"/>
        <result property="sysUser" column="sys_user"/>
        <result property="leaveType" column="leave_type"/>
        <result property="beginTime" column="begin_time"/>
        <result property="endTime" column="end_time"/>
        <result property="days" column="days"/>
        <result property="content" column="content"/>
        <result property="teacherApprove" column="teacher_approve"/>
        <result property="adminApprove" column="admin_approve"/>
    </resultMap>

    <select id="queryObject" resultType="com.seeyoumeet.entity.StudentLeaveEntity">
		select * from student_leave where id = #{value}
	</select>

    <select id="queryList" resultType="com.seeyoumeet.entity.StudentLeaveEntity">
        select * from student_leave where 1=1
        <if test="sysUser != null and sysUser != ''">
            and sysUser like '%${sysUser}%'
        </if>
        <if test="days != null">
            and `days` > #{days}
        </if>
        <if test="adminApprove == 99">
            and glysp != 1
        </if>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by id desc
            </otherwise>
        </choose>
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>

    <select id="queryTotal" resultType="int">
        select count(*) from student_leave where 1=1
        <if test="sysUser != null and sysUser != ''">
            and sysUser like '%${sysUser}%'
        </if>
    </select>

    <insert id="save" parameterType="com.seeyoumeet.entity.StudentLeaveEntity">
		insert into student_leave
		(
			`id`, 
			`sys_user`, 
			`leave_type`,
			`begin_time`, 
			`end_time`, 
			`days`, 
			`content`, 
			`teacher_approve`,
			`admin_approve`
		)
		values
		(
			#{id}, 
			#{sysUser}, 
			#{leaveType},
			#{beginTime}, 
			#{endTime}, 
			#{days}, 
			#{content}, 
			#{teacherApprove},
			#{adminApprove}
		)
	</insert>

    <update id="update" parameterType="com.seeyoumeet.entity.StudentLeaveEntity">
        update student_leave
        <set>
            <if test="sysUser != null">`sys_user` = #{sysUser},</if>
            <if test="leaveType != null">`leave_type` = #{leaveType},</if>
            <if test="beginTime != null">`begin_time` = #{beginTime},</if>
            <if test="endTime != null">`end_time` = #{endTime},</if>
            <if test="days != null">`days` = #{days},</if>
            <if test="content != null">`content` = #{content},</if>
            <if test="teacherApprove != null">`teacher_approve` = #{teacherApprove},</if>
            <if test="adminApprove != null">`admin_approve` = #{adminApprove}</if>
        </set>
        where id = #{id}
    </update>

    <delete id="delete">
		delete from student_leave where id = #{value}
	</delete>

    <delete id="deleteBatch">
        delete from student_leave where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>